import traceback
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.filters import Command, CommandStart
from aiogram import Router, exceptions, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from keyboards.inline.inline_config import choice
from config_data.config import DEFAULT_COMMANDS
from states.states_bot import Form
from loader import bot
from config_data.config import CHAT_ID
from loger.logger_helper import get_logger

log = get_logger(__name__)
router = Router()
chat_id = CHAT_ID
commads = DEFAULT_COMMANDS


@router.message(CommandStart())
async def start_bot(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è.

    :param message: Message - –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É /start.
    :param state: FSMContext - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    user = message.from_user

    try:
        bot_user = await bot.get_me()
        bot_member = await bot.get_chat_member(chat_id, bot_user.id)
        user_id = message.from_user.id
        user_member = await bot.get_chat_member(chat_id, user_id)
        user_name = user.first_name or user.username
        log.debug(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_member}")
        log.debug(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_member}")

        if (bot_member.status == ChatMemberStatus.ADMINISTRATOR
                and user_member == ChatMemberStatus.ADMINISTRATOR or ChatMemberStatus.CREATOR):
            kb = await choice()
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {user_name}! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
                                 f"–ó–∞–π–¥–∏ –≤ –º–µ–Ω—é üëá", reply_markup=kb)
            await state.set_state(Form.admin_true)

        else:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {user_name}! –£ –∫–æ–≥–æ-—Ç–æ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ!\n"
                                 f"–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–∏ /check_bot_rights")

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ start_bot: {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑‚Äç‚ôÇÔ∏è\n"
                             "–í–æ–∑–º–æ–∂–Ω–æ, –º–µ–Ω—è –Ω–µ—Ç –≤ –í–∞—à–µ–π –≥—Ä—É–ø–ø–µ")


@router.message(Command("check_bot_rights"))
async def check_bot_rights(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /check_bot_rights. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞.

    :param message: Message - –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É.
    """

    try:
        bot_user = await bot.get_me()
        chat = await bot.get_chat(chat_id)
        try:
            bot_member = await bot.get_chat_member(chat_id, bot_user.id)
            if bot_member:
                text = f"–ú–æ–∏ –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ {chat.title}:\n"
                if bot_member.status == ChatMemberStatus.ADMINISTRATOR:
                    text += "–Ø —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
                elif bot_member.status == ChatMemberStatus.MEMBER:
                    text += "–Ø —è–≤–ª—è—é—Å—å –æ–±—ã—á–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
                else:
                    text += "–Ø –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ü§∑‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏è"
                await message.answer(text)
        except Exception as e:
            log.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    except exceptions.TelegramForbiddenError as e:
        log.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
        await message.answer("–ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ")


@router.message(Command('get_chat_info'))
async def get_chat_info(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_chat_info. –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    :param message: Message - –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É.
    """

    global response
    try:
        chat = await bot.get_chat(chat_id)

        if chat.type != ChatType.SUPERGROUP:
            log.debug("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π.")
            return

        administrators = await bot.get_chat_administrators(chat_id)
        users = [usr.user for usr in administrators]
        log.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {users}")
        chat_info = {"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞": chat.title, "–¢–∏–ø —á–∞—Ç–∞": chat.type,
                     "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤": len(administrators), "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã": [
                {
                    "Admin ID": user.id,
                    "–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞": user.full_name,
                    "Username": f"@{user.username}" if hasattr(user, 'username') and user.username else "–ù–µ—Ç"
                }
                for user in users
            ]
                     }

        if chat_info:
            response = ""
            chat_name = chat_info["–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞"]
            chat_type = chat_info["–¢–∏–ø —á–∞—Ç–∞"]
            admin_count = chat_info["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"]
            admins = chat_info["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"]

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = f"*–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:* {chat_name}\n"
            response += f"*–¢–∏–ø —á–∞—Ç–∞:* {chat_type}\n"
            response += f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:* {admin_count}\n"
            response += "*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n\n"

            for admin in admins:
                response += f"  - *–ò–º—è:* {admin['–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']}\n"
                response += f"    *Admin ID:* {admin['Admin ID']}\n"
                response += f"    *Username:* {admin['Username']}\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(response, parse_mode='Markdown')

    except Exception as e:
        trace = traceback.format_exc()
        log.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{trace}")


@router.callback_query(F.data == "cancel")
async def get_cancel(callback: CallbackQuery, state: FSMContext):
    kb = await choice()
    await callback.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç", reply_markup=kb)
    await state.set_state(Form.admin_true)
