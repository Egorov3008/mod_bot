import json
import aiofiles
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command, CommandStart
from aiogram import Router, F, exceptions
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loger.logger_helper import get_logger
from loader import bot
from config_data.config import CHAT_ID
from states.states_bot import Form, Topic
from keyboards.inline.inline_config import choice, topic_kb

log = get_logger(__name__)
router = Router()
chat_id = CHAT_ID


async def save_to_json(data, name_file):
    try:
        async with aiofiles.open(name_file, mode='r', encoding='utf-8') as f:
            contents = await f.read()
            if contents.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                existing_data = json.loads(contents)
            else:
                existing_data = {}
    except (FileNotFoundError, json.JSONDecodeError) as e:
        log.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        existing_data = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã–º–∏
    for key, value in data.items():
        existing_data[key] = value

    try:
        # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
        async with aiofiles.open(name_file, mode='w', encoding='utf-8') as f:
            await f.write(json.dumps(existing_data, indent=4, ensure_ascii=False))
            log.debug("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–Ω—ã")
    except Exception as e:
        log.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")


async def load_from_json(name_file):
    try:
        async with aiofiles.open(name_file, mode='r', encoding='utf-8') as f:
            contents = await f.read()
            if contents.strip():
                return json.loads(contents)
            return {}
    except (FileNotFoundError, json.JSONDecodeError) as e:
        log.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return {}


async def delete_from_json(key, name_file):
    try:
        async with aiofiles.open(name_file, mode='r', encoding='utf-8') as f:
            contents = await f.read()
            if contents.strip():
                data = json.loads(contents)
            else:
                data = {}
    except (FileNotFoundError, json.JSONDecodeError) as e:
        log.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

    if key in data:
        del data[key]
        try:
            async with aiofiles.open(name_file, mode='w', encoding='utf-8') as f:
                await f.write(json.dumps(data, indent=4, ensure_ascii=False))
            return True
        except Exception as e:
            log.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    return False


@router.message(CommandStart())
async def start_bot(message: Message, state: FSMContext):
    try:
        admins = await get_group_admins()
        user = message.from_user
        status = await check_checking_admin_rights()
        if user.id in admins and status:
            kb = await choice()
            await state.set_state(Form.admin_true)
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
                                 f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb)
        elif user.id in admins:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! –í—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ")
    except Exception as e:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑‚Äç‚ôÇÔ∏è\n"
                             "–í–æ–∑–º–æ–∂–Ω–æ –º–µ–Ω—è –Ω–µ—Ç –≤ –í–∞—à–µ–π –≥—Ä—É–ø–ø–µ")


async def get_group_admins(chat_id: int = CHAT_ID):
    try:
        admins = await bot.get_chat_administrators(chat_id)
        list_admins_id = [adm.user.id for adm in admins]
        return list_admins_id
    except Exception as e:
        log.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ {e}")


async def check_checking_admin_rights(chat_id: int = CHAT_ID):
    try:
        bot_user = await bot.get_me()
        bot_member = await bot.get_chat_member(chat_id, bot_user.id)
        if bot_member.status == ChatMemberStatus.ADMINISTRATOR:
            return True
        return False
    except Exception as e:
        log.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {str(e)}")


@router.message(Command("check_bot_rights"))
async def check_bot_rights(message: Message, chat_id: int = CHAT_ID):
    try:
        bot_user = await bot.get_me()
        chat = await bot.get_chat(chat_id)
        try:
            bot_member = await bot.get_chat_member(chat_id, bot_user.id)
            if bot_member:
                await message.reply(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat.title}:")
                if bot_member.status == ChatMemberStatus.ADMINISTRATOR:
                    await message.answer("–Ø —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                elif bot_member.status == ChatMemberStatus.MEMBER:
                    await message.answer("–Ø —è–≤–ª—è—é—Å—å –æ–±—ã—á–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                else:
                    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    except exceptions.TelegramForbiddenError as e:
        await message.reply(f"–ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ")


@router.callback_query(F.data == "topic")
async def topic_menu(callback: CallbackQuery, state: FSMContext):
    kb = await topic_kb()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb)
    await state.set_state(Topic.menu)



@router.callback_query(F.data == "get_topic")
async def set_topic(callback: CallbackQuery, state: FSMContext):
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'get_topic'.")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ: '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã'|'—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–º—É'")
    await state.set_state(Topic.menu)


@router.message(Topic.menu)
async def get_topic(message: Message, state: FSMContext):
    text = message.text
    lst = text.split('|')
    if len(lst) != 2:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã'|'—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–º—É'")
        return

    try:
        topic_name, topic_url = lst
        data = {topic_name: topic_url}
        await save_to_json(data, "topic.json")
        await message.answer(f"–¢–µ–º–∞: {topic_name} –ø—Ä–∏–Ω—è—Ç–∞")
    except Exception as e:
        log.error(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.set_state(Topic.menu)


@router.callback_query(F.data == "view_topics")
async def view_topics(callback: CallbackQuery):
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'view_topics'.")
    topics = await load_from_json("topic.json")
    if not topics:
        await callback.message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    response = "–°–ø–∏—Å–æ–∫ —Ç–µ–º:\n"
    for topic, url in topics.items():
        response += f"{topic}: {url}\n"

    await callback.message.answer(response)


@router.callback_query(F.data == "delete_topic")
async def choose_topic_for_deletion(callback: CallbackQuery):
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'delete_topic'.")
    topics = await load_from_json("topic.json")
    if not topics:
        await callback.message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    builder = InlineKeyboardBuilder()
    for topic in topics.keys():
        builder.button(text=topic, callback_data=f"confirm_delete_{topic}")
    builder.adjust(1)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_topic(callback: CallbackQuery):
    topic = callback.data[len("confirm_delete_"):]
    success = await delete_from_json(topic, "topic.json")
    if success:
        await callback.message.answer(f"–¢–µ–º–∞ '{topic}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É '{topic}'. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@router.callback_query(F.data == "choice_topic")
async def choose_topic_for_deletion(callback: CallbackQuery):
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'choice_topic'.")
    topics = await load_from_json("topic.json")
    if not topics:
        await callback.message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    builder = InlineKeyboardBuilder()
    for topic in topics.keys():
        builder.button(text=topic, callback_data=f"choice_{topic}")
    builder.adjust(1)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_topic(callback: CallbackQuery):
    topic = callback.data[len("confirm_delete_"):]
    success = await delete_from_json(topic, "topic.json")
    if success:
        await callback.message.answer(f"–¢–µ–º–∞ '{topic}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É '{topic}'. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
