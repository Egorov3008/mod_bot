import traceback
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.filters import Command, CommandStart
from aiogram import Router, F, exceptions
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loger.logger_helper import get_logger
from loader import bot
from config_data.config import CHAT_ID
from states.states_bot import Form, Topic
from keyboards.inline.inline_config import choice, topic_kb
from utils.utils_custom import save_to_json, load_from_json

log = get_logger(__name__)
router = Router()
chat_id = CHAT_ID


@router.message(CommandStart())
async def start_bot(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è.

    :param message: Message - –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É /start.
    :param state: FSMContext - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
    """
    user = message.from_user

    try:
        admins = await get_group_admins(chat_id)
        is_admin = user.id in admins

        if is_admin:
            kb = await choice()
            await state.set_state(Form.admin_true)
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
                                 f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb)
            await message.delete()
        elif is_admin:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! –í—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ")
    except Exception:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑‚Äç‚ôÇÔ∏è\n"
                             "–í–æ–∑–º–æ–∂–Ω–æ, –º–µ–Ω—è –Ω–µ—Ç –≤ –í–∞—à–µ–π –≥—Ä—É–ø–ø–µ")


async def get_group_info(chat_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ, –≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    :param chat_id: int - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –≥—Ä—É–ø–ø—ã.
    :return: dict - –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö.
    """
    try:
        chat = await bot.get_chat(chat_id)

        if chat.type != ChatType.SUPERGROUP:
            log.debug("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π.")
            return

        administrators = await bot.get_chat_administrators(chat_id)
        users = [usr.user for usr in administrators]
        log.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {users}")

        chat_info = {f"{chat_id}":
            {
            "–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞": chat.title,
            "–¢–∏–ø —á–∞—Ç–∞": chat.type,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤": len(administrators),
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã": [
                {
                    "Admin ID": user.id,
                    "–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞": user.full_name,
                    "Username": f"@{user.username}" if hasattr(user, 'username') and user.username else "–ù–µ—Ç"
                }
                for user in users
            ]
        }}

        await save_to_json(chat_info, "info_chats.json")
        return chat_info  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    except Exception as e:
        log.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


async def get_group_admins(chat_id):
    try:
        await get_group_info(chat_id)
        data_admins = await load_from_json("info_chats.json")
        if data_admins:
            print(f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã: {data_admins}")
        list_adm = data_admins.get("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
        print(list_adm)
        return [itm.get("Admin ID") for itm in list_adm]
    except Exception as e:
        log.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏



@router.message(Command("check_bot_rights"))
async def check_bot_rights(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /check_bot_rights. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞.

    :param message: Message - –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É.
    """
    try:
        bot_user = await bot.get_me()
        chat = await bot.get_chat(chat_id)
        try:
            bot_member = await bot.get_chat_member(chat_id, bot_user.id)
            if bot_member:
                await message.reply(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat.title}:")
                if bot_member.status == ChatMemberStatus.ADMINISTRATOR:
                    await message.answer("–Ø —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                elif bot_member.status == ChatMemberStatus.MEMBER:
                    await message.answer("–Ø —è–≤–ª—è—é—Å—å –æ–±—ã—á–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                else:
                    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    except exceptions.TelegramForbiddenError as e:
        await message.reply("–ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ")


@router.message(Command('get_chat_info'))
async def get_chat_info(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_chat_info. –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    :param message: Message - –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É.
    """
    try:
        chat_info = await load_from_json("info_chats.json")
        if chat_info:

            chat_name = chat_info["–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞"]
            chat_type = chat_info["–¢–∏–ø —á–∞—Ç–∞"]
            admin_count = chat_info["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"]
            admins = chat_info["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"]

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = f"*–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:* {chat_name}\n"
            response += f"*–¢–∏–ø —á–∞—Ç–∞:* {chat_type}\n"
            response += f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:* {admin_count}\n"
            response += "*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n\n"

            for admin in admins:
                response += f"  - *–ò–º—è:* {admin['–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']}\n"
                response += f"    *Admin ID:* {admin['Admin ID']}\n"
                response += f"    *Username:* {admin['Username']}\n\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(response, parse_mode='Markdown')

    except Exception as e:
        trace = traceback.format_exc()
        log.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{trace}")

# @router.callback_query(F.data == "choice_topic")
# async def choose_topic_for_choice(callback: CallbackQuery):
#     """
#     –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
#
#     –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å
#     –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
#
#     Args:
#         callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
#     """
#     log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'choice_topic'.")
#     topics = await load_from_json("topic.json")
#     if not topics:
#         await callback.message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#         return
#
#     builder = InlineKeyboardBuilder()
#     for topic in topics.keys():
#         builder.button(text=topic, callback_data=f"choice_{topic}")
#     builder.adjust(1)
#
#     await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=builder.as_markup())
#
#
# @router.callback_query(F.data.startswith("choice_"))
# async def register_to_topic(callback: CallbackQuery):
#     """
#     –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É.
#
#     –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç
#     –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö. –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
#
#     Args:
#         callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
#     """
#     topic = callback.data[len("choice_"):]
#     topics = await load_from_json("topic.json")
#
#     if topic not in topics:
#         await callback.message.answer(f"–¢–µ–º–∞ '{topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#         return
#
#     user_id = callback.from_user.id
#
#     if user_id not in topics[topic]["users"]:
#         topics[topic]["users"].append(user_id)
#         await save_to_json(topics, "topic.json")
#         await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–º—É '{topic}'.")
#     else:
#         await callback.message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–º—É '{topic}'.")
#
#
# @router.callback_query(F.data == "unsubscribe_topic")
# async def choose_topic_for_unsubscribe(callback: CallbackQuery):
#     """
#     –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.
#
#     –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å
#     –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏.
#
#     Args:
#         callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
#     """
#     log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'unsubscribe_topic'.")
#     topics = await load_from_json("topic.json")
#     if not topics:
#         await callback.message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#         return
#
#     builder = InlineKeyboardBuilder()
#     for topic in topics.keys():
#         builder.button(text=topic, callback_data=f"unsubscribe_{topic}")
#     builder.adjust(1)
#
#     await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:", reply_markup=builder.as_markup())
#
#
# @router.callback_query(F.data.startswith("unsubscribe_"))
# async def unsubscribe_from_topic(callback: CallbackQuery):
#     """
#     –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã.
#
#     –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏ —É–¥–∞–ª—è–µ—Ç
#     –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö. –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
#
#     Args:
#         callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
#     """
#     topic = callback.data[len("unsubscribe_"):]
#     topics = await load_from_json("topic.json")
#
#     if topic not in topics:
#         await callback.message.answer(f"–¢–µ–º–∞ '{topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#         return
#
#     user_id = callback.from_user.id
#
#     if user_id in topics[topic]["users"]:
#         topics[topic]["users"].remove(user_id)
#         await save_to_json(topics, "topic.json")
#         await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã '{topic}'.")
#     else:
#         await callback.message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–º—É '{topic}'.")
#
#
# @router.callback_query(F.data == "view_registered_users")
# async def choose_topic_for_view_users(callback: CallbackQuery):
#     """
#     –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
#
#     –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å
#     –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
#
#     Args:
#         callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
#     """
#     log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'view_registered_users'.")
#     topics = await load_from_json("topic.json")
#     if not topics:
#         await callback.message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#         return
#
#     builder = InlineKeyboardBuilder()
#     for topic in topics.keys():
#         builder.button(text=topic, callback_data=f"view_users_{topic}")
#     builder.adjust(1)
#
#     await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=builder.as_markup())
#
#
# @router.callback_query(F.data.startswith("view_users_"))
# async def view_registered_users(callback: CallbackQuery):
#     """
#     –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã.
#
#     –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç
#     —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
#
#     Args:
#         callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
#     """
#     topic = callback.data[len("view_users_"):]
#     topics = await load_from_json("topic.json")
#
#     if topic not in topics:
#         await callback.message.answer(f"–¢–µ–º–∞ '{topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#         return
#
#     users = topics[topic]["users"]
#     if not users:
#         await callback.message.answer(f"–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–º—ã '{topic}'.")
#     else:
#         users_list = "\n".join(users)
#         await callback.message.answer(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ–º—ã '{topic}':\n{users_list}")
